#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('gcms:server');
var http = require('http');
var fs = require('fs');

require('console-stamp')(console, '[HH:MM:ss.l]'); //change logging

/**
 * Get port from environment and store in Express.
 */

//pavel - extend app object - add config object
var server = {};
var path = __dirname + '/port.json';
fs.readFile( path, function (err, file) {
    if (err) {
        throw err;
    }
    else {
        var conf = JSON.parse(file);
        console.log("Using port ", conf["app_Port"], " from : ",path);

        var port = normalizePort(process.env.PORT || conf["app_Port"]);
        app.set('port', port);


        /**
         * Create HTTP server.
         */

        server = http.createServer(app);

        /**
         * Listen on provided port, on all network interfaces.
         */

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    }


});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}




